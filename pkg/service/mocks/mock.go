// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	movieapi "movieapi"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockAuthorization) CreateToken(shopname, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", shopname, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockAuthorizationMockRecorder) CreateToken(shopname, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockAuthorization)(nil).CreateToken), shopname, password)
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user movieapi.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(accesstok string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accesstok)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(accesstok interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), accesstok)
}

// MockMovieList is a mock of MovieList interface.
type MockMovieList struct {
	ctrl     *gomock.Controller
	recorder *MockMovieListMockRecorder
}

// MockMovieListMockRecorder is the mock recorder for MockMovieList.
type MockMovieListMockRecorder struct {
	mock *MockMovieList
}

// NewMockMovieList creates a new mock instance.
func NewMockMovieList(ctrl *gomock.Controller) *MockMovieList {
	mock := &MockMovieList{ctrl: ctrl}
	mock.recorder = &MockMovieListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieList) EXPECT() *MockMovieListMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMovieList) Create(userRole string, list movieapi.MovieList) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userRole, list)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMovieListMockRecorder) Create(userRole, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMovieList)(nil).Create), userRole, list)
}

// Delete mocks base method.
func (m *MockMovieList) Delete(userRole string, movId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userRole, movId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMovieListMockRecorder) Delete(userRole, movId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMovieList)(nil).Delete), userRole, movId)
}

// GetByName mocks base method.
func (m *MockMovieList) GetByName(movieName string) ([]movieapi.MovieList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", movieName)
	ret0, _ := ret[0].([]movieapi.MovieList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockMovieListMockRecorder) GetByName(movieName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockMovieList)(nil).GetByName), movieName)
}

// ListMovies mocks base method.
func (m *MockMovieList) ListMovies(order string) ([]movieapi.MovieList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovies", order)
	ret0, _ := ret[0].([]movieapi.MovieList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovies indicates an expected call of ListMovies.
func (mr *MockMovieListMockRecorder) ListMovies(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovies", reflect.TypeOf((*MockMovieList)(nil).ListMovies), order)
}

// Update mocks base method.
func (m *MockMovieList) Update(userRole string, movId int, input movieapi.UpdateMovieListInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userRole, movId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMovieListMockRecorder) Update(userRole, movId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMovieList)(nil).Update), userRole, movId, input)
}

// MockActorList is a mock of ActorList interface.
type MockActorList struct {
	ctrl     *gomock.Controller
	recorder *MockActorListMockRecorder
}

// MockActorListMockRecorder is the mock recorder for MockActorList.
type MockActorListMockRecorder struct {
	mock *MockActorList
}

// NewMockActorList creates a new mock instance.
func NewMockActorList(ctrl *gomock.Controller) *MockActorList {
	mock := &MockActorList{ctrl: ctrl}
	mock.recorder = &MockActorListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorList) EXPECT() *MockActorListMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockActorList) CreateActor(userRole string, list movieapi.ActorList) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", userRole, list)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorListMockRecorder) CreateActor(userRole, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActorList)(nil).CreateActor), userRole, list)
}

// Delete mocks base method.
func (m *MockActorList) Delete(userRole string, actorId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userRole, actorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockActorListMockRecorder) Delete(userRole, actorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockActorList)(nil).Delete), userRole, actorId)
}

// ListActors mocks base method.
func (m *MockActorList) ListActors() ([]movieapi.ActorList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActors")
	ret0, _ := ret[0].([]movieapi.ActorList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActors indicates an expected call of ListActors.
func (mr *MockActorListMockRecorder) ListActors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActors", reflect.TypeOf((*MockActorList)(nil).ListActors))
}

// Update mocks base method.
func (m *MockActorList) Update(userRole string, actorId int, input movieapi.UpdateActorListInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userRole, actorId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockActorListMockRecorder) Update(userRole, actorId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockActorList)(nil).Update), userRole, actorId, input)
}
